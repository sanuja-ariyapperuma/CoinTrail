@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Env

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="csrf-token" content="@Xsrf.GetAndStoreTokens(Context).RequestToken" />
    <title>My HTMX</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
    <link href="~/css/site.css" rel="stylesheet" />
    
    <script type="importmap"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js" integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/htmx.org"></script>
</script>

    @if(Env.IsDevelopment())
    {
        <script>
            htmx.logAll();
        </script>
    }
</head>
<body>
    <div class="toast align-items-center text-white bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                Hello, world! This is a toast message.
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    <div class="container-fluid" id="main-body">
            @RenderBody()
    </div>
    <script>

        @* Events *@
        document.body.addEventListener('htmx:configRequest', e => {
            const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            e.detail.headers['RequestVerificationToken'] = token;
        });

        document.body.addEventListener("htmx:beforeRequest", function (evt) {
            const el = evt.target;

            if (el.tagName === "FORM" && el.dataset.validate) {
                const validatorFn = window[el.dataset.validate];
                if (typeof validatorFn === "function") {
                    const result = validatorFn(el);
                    if (!result) {
                        evt.preventDefault();
                    }
                }
            }
        });

        @* Custom Functions *@
        const SuccessAlert = (message) => {
            if(message){
                const toast = document.querySelector('.toast');
                const toastBody = toast.querySelector('.toast-body');
                toastBody.innerHTML = message;

                toast.classList.remove('bg-danger');
                toast.classList.add('bg-success');

                const bsToast = new bootstrap.Toast(toast);
                bsToast.show();
            }
        }
        const ErrorAlert = (message) => {
            if(message){
                const toast = document.querySelector('.toast');
                const toastBody = toast.querySelector('.toast-body');
                toastBody.innerHTML = message;

                toast.classList.remove('bg-success'); 
                toast.classList.add('bg-danger');

                const bsToast = new bootstrap.Toast(toast);
                bsToast.show();
            }
        }
    </script>
</body>
</html>
